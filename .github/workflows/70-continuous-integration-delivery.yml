name: 70-Continuous-Integration-Delivery

on:
  push:
   branches:
     - main
   paths:
     - 'todo-app/**'
     - 'docker/zipkin/**'
     - 'spring-petclinic-config-server/**'
     - 'spring-petclinic-admin-server/**'
     - 'spring-petclinic-api-gateway/**'
     - 'spring-petclinic-customers-service/**'
     - 'spring-petclinic-discovery-server/**'
     - 'spring-petclinic-vets-service/**'
     - 'spring-petclinic-visits-service/**'
     - 'docker/prometheus/**'
     - 'docker/grafana/**'


  workflow_dispatch:
    inputs:
      force_release:
        description: 'Create a new release if needed or deploy the current tagged version'
        required: false
        type: boolean
        default: false

jobs:
  versions:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
      something_to_deploy: ${{ steps.versions.outputs.something_to_deploy }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Not very nice to have to repeat this for each service, but
    # maybe as a demonstration for auto-generated strategy.matrix
    # it's ok
    - name: Semver for TODO-APP
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_todo_app_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: "todo-app"
        namespace: todo-app
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
    
    - name: Semver for ADMIN-SERVER
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_admin_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-admin-server
        namespace: spring-petclinic-admin-server
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for API-GATEWAY
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_api_gw_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-api-gateway
        namespace: spring-petclinic-api-gateway
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
        
    - name: Semver for CONFIG-SERVER
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_config_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-config-server
        namespace: spring-petclinic-config-server
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for CUSTOMERS-SERVICE
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_customers_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-customers-service
        namespace: spring-petclinic-customers-service
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
            
    - name: Semver for DICSOVERY-SERVER
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_discovery_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-discovery-server
        namespace: spring-petclinic-discovery-server
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for VETS-SERVICE
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_vets_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-vets-service
        namespace: spring-petclinic-vets-service
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for VISITS-SERVICE
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_visits_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-visits-service
        namespace: spring-petclinic-visits-service
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
 
    - name: Semver for GRAFANA
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_grafana_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: docker/grafana
        namespace: grafana
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
  
    - name: Semver for PROMETHEUS
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_prometheus_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: docker/prometheus
        namespace: prometheus
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for PROMETHEUS
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_zipkin_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: docker/zipkin
        namespace: zipkin
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Set versions
      id: versions
      run: |
          forceRelease=false
          if [[ "${{github.event_name}}" == "workflow_dispatch" ]]; then
            if [[ "${{github.event.inputs.force_release}}" == "true" ]]; then
              forceRelease=true
            fi
          fi
          delimiter=""
          matrix="{\"include\":["

          if [[ "${{steps.semver_todo_app_version.outputs.changed}}" == "true" && "${{steps.semver_todo_app_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"todo-app\",\"version\":\"${{steps.semver_todo_app_version.outputs.version}}\",\"tag\":\"${{steps.semver_todo_app_version.outputs.version_tag}}\",\"java_version\":\"11\",\"app_insights\":\"true\",\"db\":\"tododb\",\"is_tagged\":\"${{steps.semver_todo_app_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_admin_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_admin_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"spring-petclinic-admin-server\",\"version\":\"${{steps.semver_petclinic_admin_svc_version.outputs.version}}\",\"tag\":\"${{steps.semver_petclinic_admin_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"app_insights\":\"true\",\"is_tagged\":\"${{steps.semver_petclinic_admin_svc_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_api_gw_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_api_gw_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"spring-petclinic-api-gateway\",\"version\":\"${{steps.semver_petclinic_api_gw_svc_version.outputs.version}}\",\"tag\":\"${{steps.semver_petclinic_api_gw_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"app_insights\":\"true\",\"is_tagged\":\"${{steps.semver_petclinic_api_gw_svc_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_config_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_config_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"spring-petclinic-config-server\",\"version\":\"${{steps.semver_petclinic_config_svc_version.outputs.version}}\",\"tag\":\"${{steps.semver_petclinic_config_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"app_insights\":\"true\",\"is_tagged\":\"${{steps.semver_petclinic_config_svc_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_customers_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_customers_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"spring-petclinic-customers-service\",\"version\":\"${{steps.semver_petclinic_customers_svc_version.outputs.version}}\",\"tag\":\"${{steps.semver_petclinic_customers_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"app_insights\":\"true\",\"db\":\"petclinicdb\",\"is_tagged\":\"${{steps.semver_petclinic_customers_svc_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_discovery_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_discovery_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"spring-petclinic-discovery-server\",\"version\":\"${{steps.semver_petclinic_discovery_svc_version.outputs.version}}\",\"tag\":\"${{steps.semver_petclinic_discovery_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"app_insights\":\"true\",\"is_tagged\":\"${{steps.semver_petclinic_discovery_svc_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_vets_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_vets_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"spring-petclinic-vets-service\",\"version\":\"${{steps.semver_petclinic_vets_svc_version.outputs.version}}\",\"tag\":\"${{steps.semver_petclinic_vets_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"app_insights\":\"true\",\"db\":\"petclinicdb\",\"is_tagged\":\"${{steps.semver_petclinic_vets_svc_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_visits_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_visits_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"spring-petclinic-visits-service\",\"version\":\"${{steps.semver_petclinic_visits_svc_version.outputs.version}}\",\"tag\":\"${{steps.semver_petclinic_visits_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"app_insights\":\"true\",\"db\":\"petclinicdb\",\"is_tagged\":\"${{steps.semver_petclinic_visits_svc_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_grafana_version.outputs.changed}}" == "true" && "${{steps.semver_grafana_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"grafana\",\"version\":\"${{steps.semver_grafana_version.outputs.version}}\",\"tag\":\"${{steps.semver_grafana_version.outputs.version_tag}}\",\"parent_dir\":\"docker/\",\"is_tagged\":\"${{steps.semver_grafana_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_prometheus_version.outputs.changed}}" == "true" && "${{steps.semver_prometheus_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"prometheus\",\"version\":\"${{steps.semver_prometheus_version.outputs.version}}\",\"tag\":\"${{steps.semver_prometheus_version.outputs.version_tag}}\",\"parent_dir\":\"docker/\",\"is_tagged\":\"${{steps.semver_prometheus_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_zipkin_version.outputs.changed}}" == "true" && "${{steps.semver_zipkin_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact\":\"zipkin\",\"version\":\"${{steps.semver_zipkin_version.outputs.version}}\",\"tag\":\"${{steps.semver_zipkin_version.outputs.version_tag}}\",\"parent_dir\":\"docker/\",\"is_tagged\":\"${{steps.semver_zipkin_version.outputs.is_tagged}}\"}"
            delimiter=","
          fi
          if [[ "$delimiter" == "" ]]; then
            matrix=""
            echo "matrix=\"\"" >> $GITHUB_OUTPUT
            echo "something_to_deploy=false" >> $GITHUB_OUTPUT
          else
            matrix="$matrix]}"
            echo "matrix=${matrix}" >> $GITHUB_OUTPUT
            echo "something_to_deploy=true" >> $GITHUB_OUTPUT
          fi
          echo "matrix: ${matrix}"
  
  release_deploy_app:
    needs: [versions]
    runs-on: ubuntu-latest
    if: ${{ contains(needs.versions.outputs.something_to_deploy, 'true') }}
    permissions:
      contents: write
      packages: write
      id-token: write

    strategy:
      max-parallel: 11
      matrix: ${{fromJson(needs.versions.outputs.matrix)}}
    env:
      ARTIFACT_NAME: ${{ matrix.artifact }}
      VERSION: ${{ matrix.version }}
      VERSION_TAG: ${{ matrix.tag }}
      JAVA_VERSION: ${{ matrix.java_version }}
      APP_INSIGHTS: ${{ matrix.app_insights }}
      DB: ${{ matrix.db }}
      AKS_SUBSCRIPTION_ID: ${{secrets.AKS_SUBSCRIPTION_ID}}
      AKS_RESOURCE_GROUP: ${{secrets.AKS_RESOURCE_GROUP}}
      PGSQL_SUBSCRIPTION_ID: ${{secrets.PGSQL_SUBSCRIPTION_ID || secrets.AKS_SUBSCRIPTION_ID}}
      PGSQL_RESOURCE_GROUP: ${{secrets.PGSQL_RESOURCE_GROUP || secrets.AKS_RESOURCE_GROUP}}
      CONTAINER_REGISTRY_SUBSCRIPTION_ID: ${{secrets.CONTAINER_REGISTRY_SUBSCRIPTION_ID || secrets.AKS_SUBSCRIPTION_ID}}
      CONTAINER_REGISTRY_RESOURCE_GROUP: ${{secrets.CONTAINER_REGISTRY_RESOURCE_GROUP || secrets.AKS_RESOURCE_GROUP}}
    outputs:
      ARTIFACT_NAME: ${{ steps.build_container.outputs.ARTIFACT_NAME }}
      VERSION: ${{ steps.build_container.outputs.VERSION }}
    defaults:
      run:
        working-directory: "${{ matrix.parent_dir }}${{ matrix.artifact }}"
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Display parameters
      id: params
      run: |
        echo "ARTIFACT_NAME=${{env.ARTIFACT_NAME}}"
        echo "VERSION=${{env.VERSION}}"
        echo "VERSION_TAG=${{env.VERSION_TAG}}"
        echo "RELEASE_DIR_NAME=${{env.ARTIFACT_NAME}}-${{env.VERSION}}"
        echo "JAVA_VERSION=${{env.JAVA_VERSION}}"
        echo "DB=${{env.DB}}"
        echo "DB=${{secrets.PET_CLINIC_DB_NAME}}"

        echo "GITHUB_SHA=${{github.sha}}"
        echo "GITHUB_REF=${{github.ref}}"
        echo "GITHUB_EVENT_NAME=${{github.event_name}}"

        echo "DB_NAME=${{env.DB}}" >> "$GITHUB_OUTPUT"
        echo "DB_NAME: ${{env.DB}}"
        
    - name: Set up JDK
      if: ${{ env.JAVA_VERSION != '' }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{env.JAVA_VERSION}}
        distribution: 'microsoft'

    - name: Set the release version
      if: ${{ env.JAVA_VERSION != '' }}
      run: |
        mv ./pom.xml ./pom.xml.bak
        ls -la
        java ../scripts/deployment/utils/JavaUtils.java -update_pom_version ./pom.xml.bak ${{env.VERSION}} ./pom.xml

    - name: Set the git commit id
      if: ${{ env.JAVA_VERSION != '' }} 
      run: |
        mv ./pom.xml ./pom.xml.bak
        ls -la
        java ../scripts/deployment/utils/JavaUtils.java -update_git_commit_id ./pom.xml.bak "${GITHUB_SHA}" ./pom.xml
    
    - name: Build the .jar
      if: ${{ env.JAVA_VERSION != '' }}
      run: |
        export PORT=8080
        export SPRING_PROFILES_ACTIVE=local
        mvn clean package -DskipTests
    
    - name: Download Application Insights Agent
      if: ${{ env.APP_INSIGHTS == 'true' }} 
      run: |
         wget -q -O ./ai.jar https://github.com/microsoft/ApplicationInsights-Java/releases/download/3.4.12/applicationinsights-agent-3.4.12.jar
    
    - name: Build release ZIP archive
      id: create_archive
      run: |
        
        if [[ "${{env.JAVA_VERSION}}" != '' ]]; then
          mkdir ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
          ls -la ./target
          if [[ ! -f "./target/${{env.ARTIFACT_NAME}}-${{env.VERSION}}.jar" ]]; then
            echo "File ./target/${{env.ARTIFACT_NAME}}-${{env.VERSION}}.jar does not exists. Check the build script."
            exit 1
          fi
          mv ./target/${{env.ARTIFACT_NAME}}-${{env.VERSION}}.jar ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
          cp ./Dockerfile ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/Dockerfile
          cp -R ./k8s ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/k8s
          if [[ -d "./src/main/resources/db" ]]; then
            cp -R ./src/main/resources/db ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/db
          fi
          if [[ "${{env.APP_INSIGHTS}}" == 'true'  ]]; then
            mv ./ai.jar ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
          fi
        else
          # No source code here, proceed with copying the whole docker directory
          ls -la
          mkdir ../${{env.ARTIFACT_NAME}}-${{env.VERSION}}
          cp -R * ../${{env.ARTIFACT_NAME}}-${{env.VERSION}}/
          mv ../${{env.ARTIFACT_NAME}}-${{env.VERSION}} ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
        fi

        zip -r ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
        ls -la
        echo "RELEASE_NAME=${{env.ARTIFACT_NAME}}-${{env.VERSION}}" >> $GITHUB_OUTPUT

    # Only for troubleshooting, otherwise not needed
    # - name: Upload build artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{env.ARTIFACT_NAME}}-${{env.VERSION}}
    #     path: ./${{env.ARTIFACT_NAME}}/${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip
    #     if-no-files-found: error
    #     retention-days: 1          

    - name: Release build artifact
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ls -la ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip
        gh release create ${{env.VERSION_TAG}} ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip --notes "Auto release ${{env.VERSION_TAG}}"

    - name: Azure login # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure
      uses: azure/login@v1
      with:
        client-id: ${{secrets.AAD_CLIENT_ID}}
        tenant-id: ${{secrets.AAD_TENANT_ID}}
        subscription-id: ${{env.AKS_SUBSCRIPTION_ID}}         

    - name: Build a new container image
      id: build_container
      run: |
        cd ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
        ls -la
        mv ./Dockerfile ./Dockerfile.tmp
        # Dockerfile syntax is driving me bonkers. This should work...
        cat ./Dockerfile.tmp | ARTIFACT_NAME_ARG=${{env.ARTIFACT_NAME}} VERSION_ARG=${{env.VERSION}} VERSION_ARG=${{env.VERSION}} envsubst > ./Dockerfile
        cat ./Dockerfile

        az acr build ./ -r ${{secrets.CONTAINER_REGISTRY_NAME}} -t "${{env.ARTIFACT_NAME}}:${{env.VERSION}}" --file ./Dockerfile --subscription "${{env.CONTAINER_REGISTRY_SUBSCRIPTION_ID}}"
        cd ..

    - name: Synchronize DB Schema
      if: ${{ steps.params.outputs.DB_NAME != '' }}
      env:
        PGSQL_SERVER_NAME: '${{secrets.PGSQL_NAME}}.postgres.database.azure.com'
      run: |
        # Figure which service user to use and it's appId 
        case ${{env.ARTIFACT_NAME}} in
          "spring-petclinic-customers-service")
            dbUserName="${{secrets.PET_CLINIC_CUSTS_SVC_DB_USER_NAME}}"
            userManagedIdentityName="${{secrets.AKS_NAME}}-pet-clinic-custs-identity"
            ;;
          "spring-petclinic-vets-service")
            dbUserName="${{secrets.PET_CLINIC_VETS_SVC_DB_USER_NAME}}"
            userManagedIdentityName="${{secrets.AKS_NAME}}-pet-clinic-vets-identity"
            ;;
          "spring-petclinic-visits-service")
            dbUserName="${{secrets.PET_CLINIC_VISITS_SVC_DB_USER_NAME}}"
            userManagedIdentityName="${{secrets.AKS_NAME}}-pet-clinic-visits-identity"
            ;;
          *)
            dbUserName="${{secrets.TODO_APP_DB_USER_NAME}}"
            userManagedIdentityName="${{secrets.AKS_NAME}}-todo-app-identity"
            ;;
        esac
        # Never know when to use id and when to use appId...
        appClientId=`az ad sp list --display-name "${userManagedIdentityName}" --query "[?displayName=='${userManagedIdentityName}'].appId" --out tsv`
        
        echo "DB user: ${dbUserName}"
        echo "Managed identity name: ${userManagedIdentityName}"
        echo "Managed identity appClientId: ${appClientId}"
        
        # Retrieve PGSQL access token 
        export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
        echo "Token: ${PGPASSWORD}"
        
        # Create a new service user if needed
        dbUserExists=`psql --set=sslmode=require -h ${{env.PGSQL_SERVER_NAME}} -p 5432 -d "${{env.DB}}" -U "${{secrets.DBA_GROUP_NAME}}" -tAc "SELECT 1 FROM pg_roles WHERE rolname='${dbUserName}';" -v ON_ERROR_STOP=1`
        if [[ $dbUserExists -ne '1' ]]; then
          echo "User '${dbUserName}' does not exist yet, creating the user"
          psql --set=sslmode=require -h ${{env.PGSQL_SERVER_NAME}} -p 5432 -d "${{env.DB}}" -U "${{secrets.DBA_GROUP_NAME}}" -tAc "CREATE ROLE ${dbUserName} LOGIN;" -v ON_ERROR_STOP=1
        else
          echo "User '${dbUserName}' already exists, skipping the creation"
        fi
        psql --set=sslmode=require -h ${{env.PGSQL_SERVER_NAME}} -p 5432 -d "${{env.DB}}" -U "${{secrets.DBA_GROUP_NAME}}" -tAc "security label for pgaadauth on role ${dbUserName} is 'aadauth,oid=${appClientId},type=service';" -v ON_ERROR_STOP=1
        
        # Sync DB Schema
        psql --set=sslmode=require -h "${{env.PGSQL_SERVER_NAME}}" -p 5432 -d "${{env.DB}}" -U "${{secrets.DBA_GROUP_NAME}}" --file=./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/db/pgsql/schema.sql -v ON_ERROR_STOP=1
        # Load (demo) data
        psql --set=sslmode=require -h "${{env.PGSQL_SERVER_NAME}}" -p 5432 -d "${{env.DB}}" -U "${{secrets.DBA_GROUP_NAME}}" --file=./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/db/pgsql/data.sql -v ON_ERROR_STOP=1
        
        # Grant the newly create service user all necessary rights
        psql --set=sslmode=require -h "${{env.PGSQL_SERVER_NAME}}" -p 5432 -d "${{env.DB}}" -U "${{secrets.DBA_GROUP_NAME}}" -tAc "GRANT CONNECT ON DATABASE ${{env.DB}} TO ${dbUserName};" -v ON_ERROR_STOP=1
        psql --set=sslmode=require -h "${{env.PGSQL_SERVER_NAME}}" -p 5432 -d "${{env.DB}}" -U "${{secrets.DBA_GROUP_NAME}}" -tAc "GRANT USAGE ON SCHEMA public TO ${dbUserName};" -v ON_ERROR_STOP=1
        psql --set=sslmode=require -h "${{env.PGSQL_SERVER_NAME}}" -p 5432 -d "${{env.DB}}" -U "${{secrets.DBA_GROUP_NAME}}" -tAc "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ${dbUserName};" -v ON_ERROR_STOP=1

    # - name: Test connection to AKS
    #   run: |
    #     az aks command invoke \
    #       --resource-group ${{env.AKS_RESOURCE_GROUP}} \
    #       --name ${{secrets.AKS_NAME}} \
    #       --command "kubectl get ns" \
    #       --subscription "${{env.AKS_SUBSCRIPTION_ID}}"

    - name: Deploy app into AKS
      env:
        DEPLOYMENT_SUFFIX: ""
        CONTAINER_IMAGE: ${{secrets.CONTAINER_REGISTRY_NAME}}.azurecr.io/${{env.ARTIFACT_NAME}}:${{env.VERSION}}
      run: |
        cat ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/k8s/deployment.yml | CONTAINER_IMAGE=${{env.CONTAINER_IMAGE}} DEPLOYMENT_SUFFIX=${{env.DEPLOYMENT_SUFFIX}} envsubst > ./deployment.yml.tmp
        cat ./deployment.yml.tmp
        az aks command invoke \
          --resource-group ${{env.AKS_RESOURCE_GROUP}} \
          --name ${{secrets.AKS_NAME}} \
          --command "kubectl apply -f deployment.yml.tmp" \
          --file deployment.yml.tmp \
          --subscription "${{env.AKS_SUBSCRIPTION_ID}}"
